import { ref } from 'vue'

export const useBookingSubmit = () => {
  const loading = ref(false)
  const error = ref(null)

  const submitBooking = async (bookingData) => {
    loading.value = true
    error.value = null

    try {
      const supabase = useSupabaseClient()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
      if (!bookingData.name || !bookingData.phone) {
        throw new Error('–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã')
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∫–∞–∑–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω ID (yagya_id –∏–ª–∏ tour_id)
      if (!bookingData.yagya_id && !bookingData.tour_id) {
        throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω ID —è–≥—å–∏ –∏–ª–∏ —Ç—É—Ä–∞')
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º UUID —Ñ–æ—Ä–º–∞—Ç
      const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i
      
      if (bookingData.yagya_id && !uuidRegex.test(bookingData.yagya_id)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —è–≥—å–∏')
      }
      
      if (bookingData.tour_id && !uuidRegex.test(bookingData.tour_id)) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Ç—É—Ä–∞')
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
      if (!bookingData.phone.startsWith('+')) {
        throw new Error('–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +')
      }

      const insertData = {
        name: bookingData.name.trim(),
        phone: bookingData.phone.trim(),
        comments: bookingData.comments?.trim() || null,
        status: 'pending'
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π ID
      if (bookingData.yagya_id) {
        insertData.yagya_id = bookingData.yagya_id
      } else if (bookingData.tour_id) {
        insertData.tour_id = bookingData.tour_id
      }

      const { data, error: supabaseError } = await supabase
        .from('bookings')
        .insert([insertData])
        .select()
        .single()

      if (supabaseError) {
        throw new Error(supabaseError.message)
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
      try {
        const config = useRuntimeConfig()
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞—è–≤–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        const itemType = bookingData.yagya_id ? 'yagya' : 'tour'
        const itemId = bookingData.yagya_id || bookingData.tour_id
        const itemTitle = bookingData.itemTitle || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–∞/—è–≥—å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        let itemName = itemTitle
        try {
          const supabase = useSupabaseClient()
          
          if (itemType === 'tour') {
            const { data: tourData } = await supabase
              .from('tours')
              .select('title')
              .eq('id', itemId)
              .single()
            
            if (tourData && tourData.title) {
              itemName = tourData.title
            }
          } else {
            const { data: yagyaData } = await supabase
              .from('yagya')
              .select('title')
              .eq('id', itemId)
              .single()
            
            if (yagyaData && yagyaData.title) {
              itemName = yagyaData.title
            }
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è:', error)
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º itemTitle –∫–∞–∫ fallback
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const emoji = itemType === 'tour' ? 'üèõÔ∏è' : 'üî•'
        const typeText = itemType === 'tour' ? '–¢–£–†' : '–Ø–ì–¨–Ø'
        
        let message = `${emoji} *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê ${typeText}*\n\n`
        message += `üë§ *–ò–º—è:* ${bookingData.name.trim()}\n`
        message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${bookingData.phone.trim()}\n`
        message += `üìã *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${itemName}\n`
        
        if (bookingData.comments && bookingData.comments.trim()) {
          message += `üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${bookingData.comments.trim()}\n`
        }
        
        message += `\n‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU', {
          timeZone: 'Europe/Moscow',
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit'
        })}`
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await $fetch('/api/telegram/send', {
          method: 'POST',
          body: {
            message,
            chatIds: config.public.telegramChatIds
          }
        })
      } catch (telegramError) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramError)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —Ç–∞–∫ –∫–∞–∫ –∑–∞—è–≤–∫–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î
      }

      return data

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      error.value = errorMessage
      throw err
    } finally {
      loading.value = false
    }
  }

  return {
    loading,
    error,
    submitBooking
  }
} 